# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs: 
  aws-eks: circleci/aws-eks@2.1.0
  kubernetes: circleci/kubernetes@1.0
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build:
    working_directory: /app
    docker:
      - image: docker:20.10.11-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd ./src
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_ENDPOINT}
            docker tag app "${ECR_ENDPOINT}/capstone:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/capstone:${CIRCLE_SHA1}"
  lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
            name: Run linting
            command: |
              # Install hadolint
              make install
              # lint project
              make lint
  # deploy:
  test-cluster:
    docker:
      - image: python:3.7.3-stretch
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        default: 'us-east-1'
        description: |
          AWS region that the EKS cluster will be created in.
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
      - run:
          command: |
            kubectl -n web get all
          name: Test cluster
  update-deployment:
    docker:
      - image: python:3.7.3-stretch
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        default: 'us-east-1'
        description: |
          AWS region that the EKS cluster will be created in.
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
      - run:
          command: |
            kubectl -n web get all
          name: Test cluster
      - run:
          name: Install dependencies
          command: |
            apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CC86BB64
            add-apt-repository ppa:rmescandon/yq
            apt update
            apt-get install yq -y
      - run:
          name: deploy artifacts
          command: |
            yq e -i '.spec.template.spec.containers[0].image = "${ECR_ENDPOINT}/capstone:${CIRCLE_SHA1}"' src/deployment.yaml
            kubectl apply -f src/ns.yml -f src/deployment.yaml -f src/service.yml

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - lint
      - build:
          requires:
            - lint
      - test-cluster:
          cluster-name: capstone-eks-cluster
          requires:
            - build
      - update-deployment:
          cluster-name: capstone-eks-cluster
          requires:
            - test-cluster
